# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Position(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, device: int=None, lat: str=None, lon: str=None, _date: datetime=None):  # noqa: E501
        """Position - a model defined in Swagger

        :param device: The device of this Position.  # noqa: E501
        :type device: int
        :param lat: The lat of this Position.  # noqa: E501
        :type lat: str
        :param lon: The lon of this Position.  # noqa: E501
        :type lon: str
        :param _date: The _date of this Position.  # noqa: E501
        :type _date: datetime
        """
        self.swagger_types = {
            'device': int,
            'lat': str,
            'lon': str,
            '_date': datetime
        }

        self.attribute_map = {
            'device': 'device',
            'lat': 'lat',
            'lon': 'lon',
            '_date': 'date'
        }
        self._device = device
        self._lat = lat
        self._lon = lon
        self.__date = _date

    @classmethod
    def from_dict(cls, dikt) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Position of this Position.  # noqa: E501
        :rtype: Position
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self) -> int:
        """Gets the device of this Position.


        :return: The device of this Position.
        :rtype: int
        """
        return self._device

    @device.setter
    def device(self, device: int):
        """Sets the device of this Position.


        :param device: The device of this Position.
        :type device: int
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def lat(self) -> str:
        """Gets the lat of this Position.


        :return: The lat of this Position.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat: str):
        """Sets the lat of this Position.


        :param lat: The lat of this Position.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self) -> str:
        """Gets the lon of this Position.


        :return: The lon of this Position.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon: str):
        """Sets the lon of this Position.


        :param lon: The lon of this Position.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def _date(self) -> datetime:
        """Gets the _date of this Position.


        :return: The _date of this Position.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this Position.


        :param _date: The _date of this Position.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date
